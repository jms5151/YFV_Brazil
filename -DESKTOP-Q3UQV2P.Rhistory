library(gridExtra)
metrics <- list(
list(col = "NRMSE_humans", baseline = baseline_NRMSE_humans,
label = "NRMSE - Humans\n(lower = better)"),
list(col = "Correlation_humans", baseline = baseline_Correlation_humans,
label = "Correlation - Humans\n(higher = better)"),
list(col = "NRMSE_primates", baseline = baseline_NRMSE_primates,
label = "NRMSE - Primates\n(lower = better)"),
list(col = "Corrleation_primates", baseline = baseline_Correlation_primates,
label = "Correlation - Primates\n(higher = better)")
)
plot_list <- lapply(metrics, function(m) {
tornado_data <- sensitivity_results %>%
filter(parameter != 'baseline') %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[m$col]]),
value_high = max(.data[[m$col]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high, y = parameter, yend = parameter),
linewidth = 2, color = "steelblue", alpha = 0.7
) +
geom_vline(xintercept = m$baseline, linetype = "dashed",
color = "red", linewidth = 0.8) +
labs(x = m$label, y = NULL) +
theme_minimal(base_size = 10) +
theme(
panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9)
)
})
grid.arrange(grobs = plot_list, ncol = 2,
top = "Parameter Sensitivity Analysis (±20% variation)")
}
# Uncomment to create all four plots:
create_all_tornado_plots(sensitivity_results,
baseline_NRMSE_humans,
baseline_Correlation_humans,
baseline_NRMSE_primates,
baseline_Correlation_primates)
create_all_tornado_plots <- function(sensitivity_results,
baseline_NRMSE_humans,
baseline_Correlation_humans,
baseline_NRMSE_primates,
baseline_Correlation_primates) {
library(gridExtra)
metrics <- list(
list(col = "NRMSE_humans", baseline = baseline_NRMSE_humans,
label = "NRMSE - Humans\n(lower = better)"),
list(col = "Correlation_humans", baseline = baseline_Correlation_humans,
label = "Correlation - Humans\n(higher = better)"),
list(col = "NRMSE_primates", baseline = baseline_NRMSE_primates,
label = "NRMSE - Primates\n(lower = better)"),
list(col = "Corrleation_primates", baseline = baseline_Correlation_primates,
label = "Correlation - Primates\n(higher = better)")
)
plot_list <- lapply(metrics, function(m) {
tornado_data <- sensitivity_results %>%
filter(parameter != 'baseline') %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[m$col]]),
value_high = max(.data[[m$col]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high, y = parameter, yend = parameter),
linewidth = 3, color = "steelblue", alpha = 0.7
) +
geom_vline(xintercept = m$baseline, linetype = "dashed",
color = "red", linewidth = 0.8) +
labs(x = m$label, y = NULL) +
theme_minimal(base_size = 10) +
theme(
panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9)
)
})
grid.arrange(grobs = plot_list, ncol = 2,
top = "Parameter Sensitivity Analysis (±20% variation)")
}
# Uncomment to create all four plots:
create_all_tornado_plots(sensitivity_results,
baseline_NRMSE_humans,
baseline_Correlation_humans,
baseline_NRMSE_primates,
baseline_Correlation_primates)
# Your sensitivity results data
sensitivity_results <- read.csv('../sensitivity_analysis_output.csv')
View(sensitivity_results)
library(ggplot2)
library(dplyr)
baseline_row <- sensitivity_results %>%
filter(parameter == "baseline")
baseline_NRMSE_humans <- baseline_row$NRMSE_humans
baseline_Correlation_humans <- baseline_row$Correlation_humans
baseline_NRMSE_primates <- baseline_row$NRMSE_primates
baseline_Correlation_primates <- baseline_row$Corrleation_primates  # Note: typo in column name
# Remove baseline row from sensitivity results (we only want parameters)
sensitivity_params <- sensitivity_results %>%
filter(parameter != "baseline")
# Choose which metric to plot (change this line to switch metrics)
metric_column <- "NRMSE_humans"  # Options: "NRMSE_humans", "Correlation_humans",
# Get baseline value
baseline_value <- switch(metric_column,
"NRMSE_humans" = baseline_NRMSE_humans,
"Correlation_humans" = baseline_Correlation_humans,
"NRMSE_primates" = baseline_NRMSE_primates,
"Corrleation_primates" = baseline_Correlation_primates
)
# Reshape data to get low and high values for each parameter
tornado_data <- sensitivity_params %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[metric_column]]),
value_high = max(.data[[metric_column]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
# Set axis label based on metric
x_label <- switch(metric_column,
"NRMSE_humans" = "NRMSE - Humans (lower = better fit)",
"Correlation_humans" = "Correlation - Humans (higher = better fit)",
"NRMSE_primates" = "NRMSE - Primates (lower = better fit)",
"Corrleation_primates" = "Correlation - Primates (higher = better fit)"
)
# Create the plot
tornado_plot <- ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high,
y = parameter, yend = parameter),
linewidth = 10,
color = "steelblue",
alpha = 0.7
) +
geom_vline(
xintercept = baseline_value,
linetype = "dashed",
color = "red",
linewidth = 1
) +
annotate(
"text",
x = baseline_value,
y = nrow(tornado_data) + 0.5,
label = "Baseline",
color = "red",
hjust = -0.1,
size = 4
) +
labs(
title = "Tornado Plot: Parameter Sensitivity Analysis",
subtitle = paste("Metric:", gsub("_", " ", metric_column), "| Variation: ±20%"),
x = x_label,
y = "Parameter"
) +
theme_minimal(base_size = 13) +
theme(
panel.grid.major.y = element_blank(),
plot.title = element_text(face = "bold", size = 15),
plot.subtitle = element_text(size = 11),
axis.title = element_text(size = 12),
axis.text = element_text(size = 11)
)
print(tornado_plot)
cat("\n=== Sensitivity Analysis Summary ===\n")
cat("Metric:", metric_column, "\n")
cat("Baseline value:", round(baseline_value, 3), "\n\n")
summary_table <- tornado_data %>%
mutate(
value_low = round(value_low, 3),
value_high = round(value_high, 3),
range = round(range, 3)
)
print(summary_table)
cat("\n=== Diagnostic: Does baseline fall within parameter ranges? ===\n")
diagnostic <- tornado_data %>%
mutate(
baseline_in_range = (baseline_value >= value_low & baseline_value <= value_high),
pct_below_baseline = round(100 * (baseline_value - value_low) / range, 1),
pct_above_baseline = round(100 * (value_high - baseline_value) / range, 1)
) %>%
select(parameter, value_low, baseline = baseline_value, value_high, baseline_in_range)
create_all_tornado_plots <- function(sensitivity_results) {
library(gridExtra)
# Extract baseline values
baseline_row <- sensitivity_results %>% filter(parameter == "baseline")
sensitivity_params <- sensitivity_results %>% filter(parameter != "baseline")
metrics <- list(
list(col = "NRMSE_humans",
baseline = baseline_row$NRMSE_humans,
label = "NRMSE - Humans\n(lower = better)"),
list(col = "Correlation_humans",
baseline = baseline_row$Correlation_humans,
label = "Correlation - Humans\n(higher = better)"),
list(col = "NRMSE_primates",
baseline = baseline_row$NRMSE_primates,
label = "NRMSE - Primates\n(lower = better)"),
list(col = "Corrleation_primates",
baseline = baseline_row$Corrleation_primates,
label = "Correlation - Primates\n(higher = better)")
)
plot_list <- lapply(metrics, function(m) {
tornado_data <- sensitivity_params %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[m$col]]),
value_high = max(.data[[m$col]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high, y = parameter, yend = parameter),
linewidth = 8, color = "steelblue", alpha = 0.7
) +
geom_vline(xintercept = m$baseline, linetype = "dashed",
color = "red", linewidth = 0.8) +
labs(x = m$label, y = NULL) +
theme_minimal(base_size = 10) +
theme(
panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9)
)
})
grid.arrange(grobs = plot_list, ncol = 2,
top = "Parameter Sensitivity Analysis (±20% variation)")
}
# Uncomment to create all four plots:
create_all_tornado_plots(sensitivity_results)
# Create a function to format parameter names with Greek letters and subscripts
format_parameter_names <- function(param_names) {
sapply(param_names, function(p) {
# Handle mu with subscripts
if (grepl("^mu_", p)) {
subscript <- sub("^mu_", "", p)
return(bquote(mu[.(subscript)]))
}
# Handle gamma with subscripts
else if (grepl("^gamma_", p)) {
subscript <- sub("^gamma_", "", p)
return(bquote(gamma[.(subscript)]))
}
# Handle delta with subscripts
else if (grepl("^delta_", p)) {
subscript <- sub("^delta_", "", p)
return(bquote(delta[.(subscript)]))
}
# Handle pMI with subscripts
else if (grepl("^pMI", p)) {
subscript <- sub("^pMI", "", p)
return(bquote(pMI[.(subscript)]))
}
# Handle PDR with subscripts
else if (grepl("^PDR_", p)) {
subscript <- sub("^PDR_", "", p)
return(bquote(PDR[.(subscript)]))
}
# Handle b (transmission rate - could use beta if preferred)
else if (p == "b") {
return(bquote(b))  # or return(bquote(beta)) for Greek beta
}
# Default: return as-is
else {
return(p)
}
}, USE.NAMES = FALSE)
}
# Reshape data to get low and high values for each parameter
tornado_data <- sensitivity_params %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[metric_column]]),
value_high = max(.data[[metric_column]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(
parameter_original = parameter,
parameter = factor(parameter, levels = parameter)
)
# Set axis label based on metric
x_label <- switch(metric_column,
"NRMSE_humans" = "NRMSE - Humans (lower = better fit)",
"Correlation_humans" = "Correlation - Humans (higher = better fit)",
"NRMSE_primates" = "NRMSE - Primates (lower = better fit)",
"Corrleation_primates" = "Correlation - Primates (higher = better fit)"
)
# Create formatted labels for y-axis
formatted_labels <- format_parameter_names(levels(tornado_data$parameter))
# Create the plot
tornado_plot <- ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high,
y = parameter, yend = parameter),
linewidth = 10,
color = "steelblue",
alpha = 0.7
) +
geom_vline(
xintercept = baseline_value,
linetype = "dashed",
color = "red",
linewidth = 1
) +
annotate(
"text",
x = baseline_value,
y = nrow(tornado_data) + 0.5,
label = "Baseline",
color = "red",
hjust = -0.1,
size = 4
) +
scale_y_discrete(labels = formatted_labels) +
labs(
title = "Tornado Plot: Parameter Sensitivity Analysis",
subtitle = paste("Metric:", gsub("_", " ", metric_column), "| Variation: ±20%"),
x = x_label,
y = "Parameter"
) +
theme_minimal(base_size = 13) +
theme(
panel.grid.major.y = element_blank(),
plot.title = element_text(face = "bold", size = 15),
plot.subtitle = element_text(size = 11),
axis.title = element_text(size = 12),
axis.text = element_text(size = 11)
)
print(tornado_plot)
cat("\n=== Sensitivity Analysis Summary ===\n")
cat("Metric:", metric_column, "\n")
cat("Baseline value:", round(baseline_value, 3), "\n\n")
summary_table <- tornado_data %>%
mutate(
value_low = round(value_low, 3),
value_high = round(value_high, 3),
range = round(range, 3)
)
summary_table
cat("\n=== Diagnostic: Does baseline fall within parameter ranges? ===\n")
diagnostic <- tornado_data %>%
mutate(
baseline_in_range = (baseline_value >= value_low & baseline_value <= value_high),
pct_below_baseline = round(100 * (baseline_value - value_low) / range, 1),
pct_above_baseline = round(100 * (value_high - baseline_value) / range, 1)
) %>%
select(parameter, value_low, baseline = baseline_value, value_high, baseline_in_range)
print(diagnostic)
create_all_tornado_plots <- function(sensitivity_results) {
library(gridExtra)
# Extract baseline values
baseline_row <- sensitivity_results %>% filter(parameter == "baseline")
sensitivity_params <- sensitivity_results %>% filter(parameter != "baseline")
metrics <- list(
list(col = "NRMSE_humans",
baseline = baseline_row$NRMSE_humans,
label = "NRMSE - Humans\n(lower = better)"),
list(col = "Correlation_humans",
baseline = baseline_row$Correlation_humans,
label = "Correlation - Humans\n(higher = better)"),
list(col = "NRMSE_primates",
baseline = baseline_row$NRMSE_primates,
label = "NRMSE - Primates\n(lower = better)"),
list(col = "Corrleation_primates",
baseline = baseline_row$Corrleation_primates,
label = "Correlation - Primates\n(higher = better)")
)
plot_list <- lapply(metrics, function(m) {
tornado_data <- sensitivity_params %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[m$col]]),
value_high = max(.data[[m$col]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
# Format parameter labels
formatted_labels <- format_parameter_names(levels(tornado_data$parameter))
ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high, y = parameter, yend = parameter),
linewidth = 8, color = "steelblue", alpha = 0.7
) +
geom_vline(xintercept = m$baseline, linetype = "dashed",
color = "red", linewidth = 0.8) +
scale_y_discrete(labels = formatted_labels) +
labs(x = m$label, y = NULL) +
theme_minimal(base_size = 10) +
theme(
panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9)
)
})
grid.arrange(grobs = plot_list, ncol = 2,
top = "Parameter Sensitivity Analysis (±20% variation)")
}
# Uncomment to create all four plots:
create_all_tornado_plots(sensitivity_results)
create_all_tornado_plots <- function(sensitivity_results) {
library(gridExtra)
# Extract baseline values
baseline_row <- sensitivity_results %>% filter(parameter == "baseline")
sensitivity_params <- sensitivity_results %>% filter(parameter != "baseline")
metrics <- list(
list(col = "NRMSE_humans",
baseline = baseline_row$NRMSE_humans,
label = "NRMSE - Humans\n(lower = better)"),
list(col = "Correlation_humans",
baseline = baseline_row$Correlation_humans,
label = "Correlation - Humans\n(higher = better)"),
list(col = "NRMSE_primates",
baseline = baseline_row$NRMSE_primates,
label = "NRMSE - Primates\n(lower = better)"),
list(col = "Corrleation_primates",
baseline = baseline_row$Corrleation_primates,
label = "Correlation - Primates\n(higher = better)")
)
plot_list <- lapply(metrics, function(m) {
tornado_data <- sensitivity_params %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[m$col]]),
value_high = max(.data[[m$col]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
# Format parameter labels
formatted_labels <- format_parameter_names(levels(tornado_data$parameter))
ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high, y = parameter, yend = parameter),
linewidth = 2, color = "steelblue", alpha = 0.7
) +
geom_vline(xintercept = m$baseline, linetype = "dashed",
color = "red", linewidth = 0.8) +
scale_y_discrete(labels = formatted_labels) +
labs(x = m$label, y = NULL) +
theme_minimal(base_size = 10) +
theme(
panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9)
)
})
grid.arrange(grobs = plot_list, ncol = 2,
top = "Parameter Sensitivity Analysis (±20% variation)")
}
# Uncomment to create all four plots:
create_all_tornado_plots(sensitivity_results)
create_all_tornado_plots <- function(sensitivity_results) {
library(gridExtra)
# Extract baseline values
baseline_row <- sensitivity_results %>% filter(parameter == "baseline")
sensitivity_params <- sensitivity_results %>% filter(parameter != "baseline")
metrics <- list(
list(col = "NRMSE_humans",
baseline = baseline_row$NRMSE_humans,
label = "NRMSE (Humans)\n(lower = better)"),
list(col = "Correlation_humans",
baseline = baseline_row$Correlation_humans,
label = "Correlation (Humans)\n(higher = better)"),
list(col = "NRMSE_primates",
baseline = baseline_row$NRMSE_primates,
label = "NRMSE (Primates)\n(lower = better)"),
list(col = "Corrleation_primates",
baseline = baseline_row$Corrleation_primates,
label = "Correlation (Primates)\n(higher = better)")
)
plot_list <- lapply(metrics, function(m) {
tornado_data <- sensitivity_params %>%
group_by(parameter) %>%
summarise(
value_low = min(.data[[m$col]]),
value_high = max(.data[[m$col]]),
range = abs(value_high - value_low)
) %>%
arrange(desc(range)) %>%
mutate(parameter = factor(parameter, levels = parameter))
# Format parameter labels
formatted_labels <- format_parameter_names(levels(tornado_data$parameter))
ggplot(tornado_data, aes(y = parameter)) +
geom_segment(
aes(x = value_low, xend = value_high, y = parameter, yend = parameter),
linewidth = 2, color = "steelblue", alpha = 0.7
) +
geom_vline(xintercept = m$baseline, linetype = "dashed",
color = "red", linewidth = 0.8) +
scale_y_discrete(labels = formatted_labels) +
labs(x = m$label, y = NULL) +
theme_minimal(base_size = 10) +
theme(
panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9)
)
})
grid.arrange(grobs = plot_list, ncol = 2,
top = "Parameter Sensitivity Analysis (±20% variation)")
}
# Uncomment to create all four plots:
create_all_tornado_plots(sensitivity_results)
